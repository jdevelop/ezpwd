// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo(in *jlexer.Lexer, out *passwordsTable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Background":
			out.Background = hex2Color(in.String())
		case "Title":
			out.Title = hex2Color(in.String())
		case "Border":
			out.Border = hex2Color(in.String())
		case "Label":
			out.Label = hex2Color(in.String())
		case "ButtonBackground":
			out.ButtonBackground = hex2Color(in.String())
		case "ButtonText":
			out.ButtonText = hex2Color(in.String())
		case "ButtonAccent":
			out.ButtonAccent = hex2Color(in.String())
		case "FieldBackground":
			out.FieldBackground = hex2Color(in.String())
		case "FieldText":
			out.FieldText = hex2Color(in.String())
		case "Selection":
			out.Selection = hex2Color(in.String())
		case "SelectionBackground":
			out.SelectionBackground = hex2Color(in.String())
		case "Header":
			out.Header = hex2Color(in.String())
		case "CopiedBackground":
			out.CopiedBackground = hex2Color(in.String())
		case "CopiedText":
			out.CopiedText = hex2Color(in.String())
		case "CopiedTitle":
			out.CopiedTitle = hex2Color(in.String())
		case "CopiedBorder":
			out.CopiedBorder = hex2Color(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo(out *jwriter.Writer, in passwordsTable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Background\":"
		out.RawString(prefix[1:])
		out.String(color2Hex(in.Background))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Title))
	}
	{
		const prefix string = ",\"Border\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Border))
	}
	{
		const prefix string = ",\"Label\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Label))
	}
	{
		const prefix string = ",\"ButtonBackground\":"
		out.RawString(prefix)
		out.String(color2Hex(in.ButtonBackground))
	}
	{
		const prefix string = ",\"ButtonText\":"
		out.RawString(prefix)
		out.String(color2Hex(in.ButtonText))
	}
	{
		const prefix string = ",\"ButtonAccent\":"
		out.RawString(prefix)
		out.String(color2Hex(in.ButtonAccent))
	}
	{
		const prefix string = ",\"FieldBackground\":"
		out.RawString(prefix)
		out.String(color2Hex(in.FieldBackground))
	}
	{
		const prefix string = ",\"FieldText\":"
		out.RawString(prefix)
		out.String(color2Hex(in.FieldText))
	}
	{
		const prefix string = ",\"Selection\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Selection))
	}
	{
		const prefix string = ",\"SelectionBackground\":"
		out.RawString(prefix)
		out.String(color2Hex(in.SelectionBackground))
	}
	{
		const prefix string = ",\"Header\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Header))
	}
	{
		const prefix string = ",\"CopiedBackground\":"
		out.RawString(prefix)
		out.String(color2Hex(in.CopiedBackground))
	}
	{
		const prefix string = ",\"CopiedText\":"
		out.RawString(prefix)
		out.String(color2Hex(in.CopiedText))
	}
	{
		const prefix string = ",\"CopiedTitle\":"
		out.RawString(prefix)
		out.String(color2Hex(in.CopiedTitle))
	}
	{
		const prefix string = ",\"CopiedBorder\":"
		out.RawString(prefix)
		out.String(color2Hex(in.CopiedBorder))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v passwordsTable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *passwordsTable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo(l, v)
}
func easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo1(in *jlexer.Lexer, out *passwordMgmtForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Background":
			out.Background = hex2Color(in.String())
		case "TitleAdd":
			out.TitleAdd = hex2Color(in.String())
		case "TitleUpdate":
			out.TitleUpdate = hex2Color(in.String())
		case "BorderAdd":
			out.BorderAdd = hex2Color(in.String())
		case "BorderUpdate":
			out.BorderUpdate = hex2Color(in.String())
		case "Label":
			out.Label = hex2Color(in.String())
		case "ButtonBackground":
			out.ButtonBackground = hex2Color(in.String())
		case "ButtonText":
			out.ButtonText = hex2Color(in.String())
		case "FieldBackground":
			out.FieldBackground = hex2Color(in.String())
		case "FieldText":
			out.FieldText = hex2Color(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo1(out *jwriter.Writer, in passwordMgmtForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Background\":"
		out.RawString(prefix[1:])
		out.String(color2Hex(in.Background))
	}
	{
		const prefix string = ",\"TitleAdd\":"
		out.RawString(prefix)
		out.String(color2Hex(in.TitleAdd))
	}
	{
		const prefix string = ",\"TitleUpdate\":"
		out.RawString(prefix)
		out.String(color2Hex(in.TitleUpdate))
	}
	{
		const prefix string = ",\"BorderAdd\":"
		out.RawString(prefix)
		out.String(color2Hex(in.BorderAdd))
	}
	{
		const prefix string = ",\"BorderUpdate\":"
		out.RawString(prefix)
		out.String(color2Hex(in.BorderUpdate))
	}
	{
		const prefix string = ",\"Label\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Label))
	}
	{
		const prefix string = ",\"ButtonBackground\":"
		out.RawString(prefix)
		out.String(color2Hex(in.ButtonBackground))
	}
	{
		const prefix string = ",\"ButtonText\":"
		out.RawString(prefix)
		out.String(color2Hex(in.ButtonText))
	}
	{
		const prefix string = ",\"FieldBackground\":"
		out.RawString(prefix)
		out.String(color2Hex(in.FieldBackground))
	}
	{
		const prefix string = ",\"FieldText\":"
		out.RawString(prefix)
		out.String(color2Hex(in.FieldText))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v passwordMgmtForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *passwordMgmtForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo1(l, v)
}
func easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo2(in *jlexer.Lexer, out *messages) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SuccessBackground":
			out.SuccessBackground = hex2Color(in.String())
		case "SuccessBorder":
			out.SuccessBorder = hex2Color(in.String())
		case "SuccessTitle":
			out.SuccessTitle = hex2Color(in.String())
		case "SuccessText":
			out.SuccessText = hex2Color(in.String())
		case "FailureBackground":
			out.FailureBackground = hex2Color(in.String())
		case "FailureBorder":
			out.FailureBorder = hex2Color(in.String())
		case "FailureTitle":
			out.FailureTitle = hex2Color(in.String())
		case "FailureText":
			out.FailureText = hex2Color(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo2(out *jwriter.Writer, in messages) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SuccessBackground\":"
		out.RawString(prefix[1:])
		out.String(color2Hex(in.SuccessBackground))
	}
	{
		const prefix string = ",\"SuccessBorder\":"
		out.RawString(prefix)
		out.String(color2Hex(in.SuccessBorder))
	}
	{
		const prefix string = ",\"SuccessTitle\":"
		out.RawString(prefix)
		out.String(color2Hex(in.SuccessTitle))
	}
	{
		const prefix string = ",\"SuccessText\":"
		out.RawString(prefix)
		out.String(color2Hex(in.SuccessText))
	}
	{
		const prefix string = ",\"FailureBackground\":"
		out.RawString(prefix)
		out.String(color2Hex(in.FailureBackground))
	}
	{
		const prefix string = ",\"FailureBorder\":"
		out.RawString(prefix)
		out.String(color2Hex(in.FailureBorder))
	}
	{
		const prefix string = ",\"FailureTitle\":"
		out.RawString(prefix)
		out.String(color2Hex(in.FailureTitle))
	}
	{
		const prefix string = ",\"FailureText\":"
		out.RawString(prefix)
		out.String(color2Hex(in.FailureText))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messages) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messages) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo2(l, v)
}
func easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo3(in *jlexer.Lexer, out *loginForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Background":
			out.Background = hex2Color(in.String())
		case "Title":
			out.Title = hex2Color(in.String())
		case "Border":
			out.Border = hex2Color(in.String())
		case "Label":
			out.Label = hex2Color(in.String())
		case "ButtonBackground":
			out.ButtonBackground = hex2Color(in.String())
		case "ButtonText":
			out.ButtonText = hex2Color(in.String())
		case "FieldBackground":
			out.FieldBackground = hex2Color(in.String())
		case "FieldText":
			out.FieldText = hex2Color(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo3(out *jwriter.Writer, in loginForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Background\":"
		out.RawString(prefix[1:])
		out.String(color2Hex(in.Background))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Title))
	}
	{
		const prefix string = ",\"Border\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Border))
	}
	{
		const prefix string = ",\"Label\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Label))
	}
	{
		const prefix string = ",\"ButtonBackground\":"
		out.RawString(prefix)
		out.String(color2Hex(in.ButtonBackground))
	}
	{
		const prefix string = ",\"ButtonText\":"
		out.RawString(prefix)
		out.String(color2Hex(in.ButtonText))
	}
	{
		const prefix string = ",\"FieldBackground\":"
		out.RawString(prefix)
		out.String(color2Hex(in.FieldBackground))
	}
	{
		const prefix string = ",\"FieldText\":"
		out.RawString(prefix)
		out.String(color2Hex(in.FieldText))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v loginForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *loginForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo3(l, v)
}
func easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo4(in *jlexer.Lexer, out *globalScreen) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Background":
			out.Background = hex2Color(in.String())
		case "Title":
			out.Title = hex2Color(in.String())
		case "Border":
			out.Border = hex2Color(in.String())
		case "HelpText":
			out.HelpText = hex2Color(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo4(out *jwriter.Writer, in globalScreen) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Background\":"
		out.RawString(prefix[1:])
		out.String(color2Hex(in.Background))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Title))
	}
	{
		const prefix string = ",\"Border\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Border))
	}
	{
		const prefix string = ",\"HelpText\":"
		out.RawString(prefix)
		out.String(color2Hex(in.HelpText))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v globalScreen) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *globalScreen) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo4(l, v)
}
func easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo5(in *jlexer.Lexer, out *confirmForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Background":
			out.Background = hex2Color(in.String())
		case "Title":
			out.Title = hex2Color(in.String())
		case "Border":
			out.Border = hex2Color(in.String())
		case "Label":
			out.Label = hex2Color(in.String())
		case "ButtonBackground":
			out.ButtonBackground = hex2Color(in.String())
		case "ButtonText":
			out.ButtonText = hex2Color(in.String())
		case "FieldBackground":
			out.FieldBackground = hex2Color(in.String())
		case "FieldText":
			out.FieldText = hex2Color(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo5(out *jwriter.Writer, in confirmForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Background\":"
		out.RawString(prefix[1:])
		out.String(color2Hex(in.Background))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Title))
	}
	{
		const prefix string = ",\"Border\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Border))
	}
	{
		const prefix string = ",\"Label\":"
		out.RawString(prefix)
		out.String(color2Hex(in.Label))
	}
	{
		const prefix string = ",\"ButtonBackground\":"
		out.RawString(prefix)
		out.String(color2Hex(in.ButtonBackground))
	}
	{
		const prefix string = ",\"ButtonText\":"
		out.RawString(prefix)
		out.String(color2Hex(in.ButtonText))
	}
	{
		const prefix string = ",\"FieldBackground\":"
		out.RawString(prefix)
		out.String(color2Hex(in.FieldBackground))
	}
	{
		const prefix string = ",\"FieldText\":"
		out.RawString(prefix)
		out.String(color2Hex(in.FieldText))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v confirmForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *confirmForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo5(l, v)
}
func easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo6(in *jlexer.Lexer, out *colorSchema) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LoginFormColors":
			(out.LoginFormColors).UnmarshalEasyJSON(in)
		case "PasswordMgmtColors":
			(out.PasswordMgmtColors).UnmarshalEasyJSON(in)
		case "ConfirmFormColors":
			(out.ConfirmFormColors).UnmarshalEasyJSON(in)
		case "GlobalScreenColors":
			(out.GlobalScreenColors).UnmarshalEasyJSON(in)
		case "PasswordsTableColors":
			(out.PasswordsTableColors).UnmarshalEasyJSON(in)
		case "MessagesColors":
			(out.MessagesColors).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo6(out *jwriter.Writer, in colorSchema) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"LoginFormColors\":"
		out.RawString(prefix[1:])
		(in.LoginFormColors).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"PasswordMgmtColors\":"
		out.RawString(prefix)
		(in.PasswordMgmtColors).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ConfirmFormColors\":"
		out.RawString(prefix)
		(in.ConfirmFormColors).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"GlobalScreenColors\":"
		out.RawString(prefix)
		(in.GlobalScreenColors).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"PasswordsTableColors\":"
		out.RawString(prefix)
		(in.PasswordsTableColors).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"MessagesColors\":"
		out.RawString(prefix)
		(in.MessagesColors).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v colorSchema) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson525b21b0EncodeGithubComJdevelopEzpwdDemo6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *colorSchema) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson525b21b0DecodeGithubComJdevelopEzpwdDemo6(l, v)
}
